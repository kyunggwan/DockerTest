#############################################################################################
## WebApplication Type Setting
#
# none : not run as a web app and should not start an embedded web server.
# servlet : run as a servlet-based web app and should start an embedded servlet web server.
# reactive : run as a reactive web app and should start an embedded reactive web server.
spring.main.web-application-type=servlet
# 내장 톰캣 포트 설정
server.port=8080

#############################################################################################
## Banner Setting
#
# 배너화면 출력 여부 (console:콘솔출력, log:로그파일출력, off:끄기)
spring.main.banner-mode=off
# 배너 파일 지정
#spring.banner.location=banner/banner.txt
# 배너 이미지 지정
#spring.banner.image.location=‎classpath:banner/banner-bp.jpg
# 배너 이미지 좌우 크기
#spring.banner.image.width=890
#spring.banner.image.height=190

#############################################################################################
## DataSource Setting
#
#profile 관리
spring.profiles.include=aws
# MySQL인 경우
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://10.125.121.180/p1
#spring.datasource.username=first
#spring.datasource.password=Xptmxm1!
# H2인 경우
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:tcp://localhost/~/springbootjpa
#spring.datasource.username=sa
#spring.datasource.password=
# Oracle인 경우
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521/dbname
#spring.datasource.username=user
#spring.datasource.password=pwd

#############################################################################################
## JPA Setting
#
# 테이블 옵션
#  update : 기존의 스키마를 유지하며 JPA에 의해 변경된 부분만 추가한다.
#  validate : 엔티티와 테이블이 정상적으로 매핑되어있는지만 검증한다. ==> 운영 서버에서 사용
#  create : 기존에 존재하는 스키마를 삭제하고 새로 생성한다.
#  create-drop : 스키마를 생성하고 애플리케이션이 종료될 때 삭제한다.
#  none : 초기화 동작을 하지 않는다.
spring.jpa.hibernate.ddl-auto=update
# DDL 생성 시 데이터베이스의 고유 기능을 사용할지
spring.jpa.generate-ddl=false
# JPA가 생성한 Query를 보여준다.
spring.jpa.show-sql=true
# JPA가 생성한 Query를 보기 좋게 보여준다.
spring.jpa.properties.hibernate.format_sql=true
# JPA가 사용할 dialect 설정
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect

#############################################################################################
## Logging Setting
#
# 로그 수준 설정
logging.level.org.hibernate=info
# hibernate가 보여주는 로그에 있는 ?에 어떤 값이 들어갔는지 알고싶을 때
#logging.level.org.hibernate.type.descriptor.sql=trace

#############################################################################################
## JSP ViewResolver Setting
#
#spring.mvc.view.prefix=/WEB-INF/board/
#spring.mvc.view.suffix=.jsp

#############################################################################################
# Thymeleaf Setting : JSP와 같이 사용하려면 아래와 같이 설정하면 됨.
#
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.view-names=thymeleaf/*
#spring.thymeleaf.cache=false

#############################################################################################
## Security Log Level Setting
#
# trace < debug < info < warn < error < fatal
logging.level.org.springframework.security=debug

#############################################################################################
## Multipart Setting
#
# Whether to enable support of multipart uploads.(Default:true)
spring.servlet.multipart.enabled=false
# 파일 업로드 경로 설정
spring.servlet.multipart.location=C:/upload/
# 여러 파일을 업로드할 때 합친 최대 사이즈 설정
spring.servlet.multipart.max-request-size=30MB
# 업로드 파일 하나의 최대 사이즈 설정
spring.servlet.multipart.max-file-size=10MB
#[출처] application.properties 예제|작성자 geodb